/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param inorder: A list of integers that inorder traversal of a tree
     * @param postorder: A list of integers that postorder traversal of a tree
     * @return: Root of a tree
     */
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int l = preorder.length;
        if(l == 0) {
            return null;
        }
        return helper(preorder, 0, l-1, inorder, 0, l-1);
    }
    
    public TreeNode helper(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd) {
        if(preStart > preEnd || inStart > inEnd) {
            return null;
        }
        int value = preorder[preStart], seperator = inStart;
        TreeNode newNode = new TreeNode(value);
        while(inorder[seperator] != value){
            seperator += 1;
        }
        newNode.left = helper(preorder, preStart+1, preStart+(seperator - inStart), inorder, inStart, seperator - 1);
        newNode.right = helper(preorder, preStart+(seperator - inStart) + 1, preEnd, inorder, seperator + 1, inEnd);
        return newNode;
    }
    
    
}
